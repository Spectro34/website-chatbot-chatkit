# Example: Production deployment
# This configuration is optimized for production use

# Global configuration
global:
  imageRegistry: "your-registry.com"
  imagePullSecrets:
    - name: "your-registry-secret"

# Security configuration
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# Backend configuration
backend:
  enabled: true
  replicaCount: 3
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  env:
    NODE_ENV: "production"
    PORT: 3001
    ALLOWED_ORIGINS: "https://yourdomain.com,https://www.yourdomain.com"
    MAX_REQUESTS_PER_MINUTE: 60
    MAX_REQUESTS_PER_HOUR: 1000
  security:
    sessionSecret: "your-super-secret-session-key-change-this-in-production"
    apiKeyHashSalt: "your-salt-for-api-key-hashing-change-this-in-production"

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 2
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  widget:
    theme: "light"
    position: "bottom-right"
    autoOpen: false

# Ollama configuration
ollama:
  enabled: true
  model: "llama2:latest"
  resources:
    limits:
      cpu: 4000m
      memory: 8Gi
    requests:
      cpu: 2000m
      memory: 4Gi
  persistence:
    enabled: true
    size: 50Gi
    storageClass: "fast-ssd"

# OpenAI fallback
openai:
  enabled: true
  apiKey: "sk-proj-your-openai-api-key-here"
  model: "gpt-3.5-turbo"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  hosts:
    - host: chatkit.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls:
    - secretName: chatkit-tls
      hosts:
        - chatkit.yourdomain.com

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s

# Logging
logging:
  level: "info"
  format: "json"
